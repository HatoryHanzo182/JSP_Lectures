handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
############################################################
# Global config properties.
# all handlers have *.level prop as INFO
#############################################################
.level=INFO

############################################################
# Handler specific properties.
# ConsoleHandler
############################################################
java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter
# java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.encoding = UTF-8

############################################################
# FileHandler
############################################################
# default file output is in user's home directory.   %h/java%u.log
java.util.logging.FileHandler.pattern   = %h/javaweb.log
java.util.logging.FileHandler.limit     = 50000
java.util.logging.FileHandler.count     = 1
# java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
# java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.formatter = org.apache.juli.OneLineFormatter
java.util.logging.FileHandler.level     = WARNING
java.util.logging.FileHandler.filter    =
java.util.logging.FileHandler.encoding  = UTF-8
java.util.logging.FileHandler.append    = true

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this: (!?! not working for JDK8, does for JDK11)
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level = SEVERE
